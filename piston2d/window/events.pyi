from piston2d.piston2d.input import Button
from piston2d.piston2d.window import Window
from typing import List, Optional, Tuple


class Event:
    def is_input(self) -> bool: ...
    def is_loop(self) -> bool: ...

    def render_args(self) -> Optional[RenderArgs]: ...
    def update_args(self) -> Optional[UpdateArgs]: ...
    def press_args(self) -> Optional[Button]: ...
    def keypress_args(self) -> Optional[Button]: ...
    def mousepress_args(self) -> Optional[Button]: ...
    def release_args(self) -> Optional[Button]: ...
    def keyrelease_args(self) -> Optional[Button]: ...
    def mouserelease_args(self) -> Optional[Button]: ...


class RenderArgs:
    @property
    def ext_dt(self) -> float: ...
    @property
    def window_size(self) -> Tuple[float, float]: ...
    @property
    def draw_size(self) -> Tuple[float, float]: ...
    @property
    def viewport(self) -> Viewport: ...

class UpdateArgs:
    @property
    def dt(self) -> float: ...

class Viewport:
    @property
    def rect(self) -> List[float]: ...
    @property
    def draw_size(self) -> Tuple[int, int]: ...
    @property
    def window_size(self) -> Tuple[float, float]: ...

class EventSettings:
    def __init__(self) -> None: ...
    @property
    def max_fps(self) -> int: ...
    @property
    def ups(self) -> int: ...
    @property
    def ups_reset(self) -> int: ...
    @property
    def swap_buffers(self) -> bool: ...
    @property
    def bench_mode(self) -> bool: ...
    @property
    def lazy(self) -> bool: ...

class Events:
    def __init__(self, settings: EventSettings) -> None: ...
    def next(self, window: Window) -> Optional[Event]: ...

